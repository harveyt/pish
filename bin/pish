#!/bin/bash
#
# Provision In SHell.
#

# ================================================================================
# Configuration
#

function pish_configure()
{
    # Pish
    PISH_URL="git@github.com:harveyt/pish.git"

    PISH_BOX_ROOT="$HOME/Projects"
    PISH_BOX_URL="git@github.com:harveyt"

    # Curl
    CURL="curl -fsSL"

    # lib/pish/1pass
    OP_KEYRING_URL="https://downloads.1password.com/linux/keys/1password.asc"
    OP_KEYRING="/usr/share/keyrings/1password-archive-keyring.gpg"

    OP_APT_SOURCE_URL="https://downloads.1password.com/linux/debian/amd64"
    OP_APT_SOURCE="/etc/apt/sources.list.d/1password.list"

    OP_DEBSIG_POLICY_URL="https://downloads.1password.com/linux/debian/debsig/1password.pol"
    OP_DEBSIG_POLICY="/etc/debsig/policies/AC2D62742012EA22/1password.pol"

    OP_DEBSIG_KEYRING_URL="https://downloads.1password.com/linux/keys/1password.asc"
    OP_DEBSIG_KEYRING="/usr/share/debsig/keyrings/AC2D62742012EA22/debsig.gpg"

    OP=op

    # ID of item which represents actual account
    OP_ACCOUNT_ID=iymn4u35ckh45zig37mmolcxbe

    # lib/pish/git
    GIT_ORIGIN=harveyt
    GIT_PROJECTS_ROOT="$HOME/Projects"

    # lib/pish/box
    BOX_USER_CONFIG_URL=git@github.com:harveyt/config.git
    BOX_CONFIG_FILE=$PISH_BOX_ROOT/$PISH_BOX/pish-config

    # lib/pish/fonts
    FONT_LOCAL=$HOME/lib/fonts
    FONT_SHARE=/usr/local/share/fonts

    # Emacs
    # TODO: Fix jammy bit
    EMACS_REPO_FILE=kelleyk-ubuntu-emacs-jammy.list
    EMACS_REPO_ID="deb https://ppa.launchpadcontent.net/kelleyk/emacs/ubuntu/ jammy main"

    # lib/pish/ssh
    SSH_DIR=$HOME/.ssh
    SSH_ID_RSA=$SSH_DIR/id_rsa
    SSH_ID_RSA_PUB=$SSH_DIR/id_rsa.pub

    # lib/pish/gpg
    GPG_CONF=$HOME/lib/gpg/gpg.conf
    GPG_HOME=$HOME/.gnupg
    GPG_HOME_PERMS=700
    GPG_MAJOR=2
    GPG_MINOR=2

    GPG_OP_DATE=2022-02-02
    GPG_OP_KEYID=B7DCFE052E3EA081
    GPG_OP_PREFIX="GPG Backup - "

    # lib/pish/github
    GITHUB_KEY="/usr/share/keyrings/githubcli-archive-keyring.gpg"
    GITHUB_KEY_URL="https://cli.github.com/packages/githubcli-archive-keyring.gpg"
    GITHUB_REPO_FILE="github-cli.list"
    GITHUB_REPO_ID="deb [arch=$(dpkg --print-architecture) signed-by=$GITHUB_KEY] https://cli.github.com/packages stable main"
}

# ================================================================================
# Determine script name and defaults
#
function pish_init_script()
{
    PISH_NAME="$(basename "$0" .sh)"

    local file="$(basename "$0")"
    local dir="$(cd "$(dirname "$0")"; pwd -P)"

    PISH="$dir/$file"
    PISH_ROOT="${dir%/bin}"
    PISH_BIN="$PISH_ROOT/bin"
    PISH_LIB="$PISH_ROOT/lib/pish"

    PISH_FAST=${PISH_FAST:-false}

    PISH_VERBOSE=${PISH_VERBOSE:-true}
    PISH_VERBOSE_PREFIX=${PISH_VERBOSE_PREFIX:-}
}

# ================================================================================
# Option processing
#

function pish_usage()
{
    echo "usage: pish ...

Provision In SHell. Ensure a machine is provisioned according to some simple bash script requirements.

-v, --verbose	Verbose output to stderr (default).
-q, --quiet	No verbose output to stderr.
-V, --version	Show version to stderr.

-t requirement	Run specified requirements (run defaults if none supplied).
" >&2
    exit 1
}

function pish_process_opt()
{
    local opt="$1"

    case "$opt" in
	v|verbose)
	    PISH_VERBOSE=true
	    ;;
	q|quiet)
	    PISH_VERBOSE=false
	    ;;
	V|version)
	    pish_show_version
	    ;;
	t)
	    requirement $OPTARG
	    ;;
	*)
	    pish_usage
	    ;;
    esac
}

function pish_show_version()
{
    echo "pish %%VERSION%%" >&2
    exit 0
}

# ================================================================================
# Helpers

function error()
{
    verb_end ""
    echo "Error: $PISH_NAME: $*" >&2
    exit 1
}

function verb()
{
    [[ "$PISH_VERBOSE" != "true" ]] && return
    echo "${PISH_VERBOSE_PREFIX}$*" >&2
}

function verb_begin()
{
    [[ "$PISH_VERBOSE" != "true" ]] && return
    echo -n "${PISH_VERBOSE_PREFIX}$*" >&2
}

function verb_cont()
{
    [[ "$PISH_VERBOSE" != "true" ]] && return
    echo -n "$*" >&2
}

function verb_end()
{
    [[ "$PISH_VERBOSE" != "true" ]] && return
    echo "$*" >&2
}

function is_function()
{
    local name="$1"
    local value="$(type -t $name)"
    [[ "$value" == "function" ]]
}

function quote_args()
{
    printf "\"%s\" " "$@"
}

# ================================================================================
# Converge functions

function converge_get_desc()
{
    local cmd="$1"
    shift
    if ! is_function ${cmd}_DESC
    then
	verb "[$cmd] FAILURE (${cmd}_DESC function is missing)"
	return 1
    fi

    eval ${cmd}_DESC $(quote_args "$@")
    return 0
}

function converge_prerequisites()
{
    local cmd
    local set_requirement=""
    eval $(converge_process_arguments "$@")

    if ! is_function ${cmd}_PREQ
    then
	return
    fi

    eval ${cmd}_PREQ $(quote_args "$@")
}

function converge_test()
{
    local cmd="$1"
    shift
    local desc="$(converge_get_desc $cmd "$@")"

    if [[ "$desc" == "" ]]
    then
	exit 1
    fi
    
    verb_begin "[$cmd] Test $desc ... "
    
    if ! is_function ${cmd}_TEST
    then
	verb_end "FAILURE (${cmd}_TEST function is missing)"
	exit 1
    fi

    if eval ${cmd}_TEST $(quote_args "$@")
    then
	verb_end "Ok"
	return 0
    fi

    verb_end "Needs Update"
    return 1
}

function converge_update()
{
    local cmd="$1"
    shift
    local desc="$(converge_get_desc $cmd "$@")"

    verb_begin "[$cmd] Resolve $desc ... "

    if is_function ${cmd}_SHELL
    then
	verb_end "Updating in sub-shell"
	converge_update_shell $cmd "$@"
    elif is_function ${cmd}_LOCAL
    then
	if converge_update_local $cmd "$@"
	then
	    verb_end "Updated"
	else
	    verb_end "FAILURE"
	fi
    else
	verb_end "FAILURE (${cmd}_SHELL and ${cmd}_LOCAL functions are missing)"
	exit 1
    fi
}

function converge_validate()
{
    local cmd="$1"
    shift
    local desc="$(converge_get_desc $cmd "$@")"

    verb_begin "[$cmd] Validate $desc ... "

    local func=_VALIDATE
    if ! is_function ${cmd}${func}
    then
	func=_TEST
	if ! is_function ${cmd}${func}
	then
	   verb_end "FAILURE (${cmd}_VALIDATE and ${cmd}_TEST functions are missing)"
	   exit 1	   
	fi
    fi

    if ! eval ${cmd}${func} $(quote_args "$@")
    then
	verb_end "FAILURE (${cmd}${func} returned non-zero)"
	exit 1
    fi

    verb_end "Ok"
}
    
function converge_update_shell()
{
    local cmd="$1"
    shift
    local args="$(quote_args "$@")"

    verb "[$cmd] --- Shell --- "

    local shell_prefix="${PISH_VERBOSE_PREFIX}[$cmd] "
    shift
    (
	eval ${cmd}_SHELL $args 2>&1 | sed -e "s/^/$shell_prefix/"
	exit ${PIPESTATUS[0]}
    )
    local status=$?

    if [[ $status -ne 0 ]]
    then
	verb "[$cmd] --- Shell - FAILURE (exit $status) ---"
	exit 1
    fi

    verb "[$cmd] --- Shell - Success ---"
}

function converge_update_local()
{
    local cmd="$1"
    shift
    eval ${cmd}_LOCAL $(quote_args "$@")
    local status=$?
    return $status
}

function converge_requirement()
{
    local cmd
    local set_requirement=""
    eval $(converge_process_arguments "$@")
    
    if ! converge_test $cmd "$@"
    then
	converge_update $cmd "$@"
	converge_validate $cmd "$@"

	if [[ "$set_requirement" != "" ]]
	then
	    verb "Adding \"$set_requirement\""
	    requirement "$set_requirement"
	fi
    fi
}

function converge_process_arguments()
{
    local c
    local OPTIND
    local set_requirement=""

    while getopts s: c "$@"
    do
	case $c in
	    s)
		set_requirement="$OPTARG"
		;;
	    *)
		error "Unknown option \"-$c\" for requirement"
		;;
	esac
    done
    shift $((OPTIND - 1))
    if [[ $# -eq 0 ]]
    then
	error "Missing command for requirement"
    fi

    local cmd="$1"
    shift
    
    echo "set_requirement=\"$set_requirement\"; cmd=\"$cmd\"; set -- $(quote_args "$@")"
}

# ================================================================================
# Requirement handling
#
declare -a REQUIREMENTS
declare -A REQUIREMENTS_MAP

function requirement()
{
    if requirement_exists "$@"
    then
	return
    fi

    converge_prerequisites "$@"
    
    local args="$(quote_args "$@")"
    REQUIREMENTS+=("$args")
    REQUIREMENTS_MAP["$args"]=true
}

function requirement_exists()
{
    local args="$(quote_args "$@")"
    local value=${REQUIREMENTS_MAP["$args"]}
    if [[ "$value" != "" ]]; then
	return 0
    fi
    return 1
}
    
function requirement_run_all()
{
    while true
    do
	if [[ "${#REQUIREMENTS[@]}" -eq 0 ]]
	then
	    break
	fi

	# Pop one
	local requirement="${REQUIREMENTS[0]}"
	REQUIREMENTS=("${REQUIREMENTS[@]:1}")
	unset REQUIREMENTS_MAP["$requirement"]

	# Run it
	eval converge_requirement $requirement
    done
}

# ================================================================================
# OS and Box Detection

function pish_detect_os()
{
    case $(uname -s) in
	Darwin)
	    PISH_OS=macos
	    ;;
	Linux)
	    # Could be Linux or WSL2
	    case $(uname -r) in
		*-WSL2)
		    PISH_OS=linux-wsl2
		    ;;
		*)
		    PISH_OS=linux
		    ;;
	    esac
	    ;;
	*)
	    error "unknown OS '$(uname -s)'"
	    ;;
    esac
}

function pish_detect_box()
{
    PISH_HOST=$(hostname)
    case $PISH_HOST in
	Harveys-MBP)
	    PISH_BOX=box-spartan-macos
	    ;;
	panther)
	    PISH_BOX=box-panther-win
	    ;;
	*)
	    error "unknown host '$PISH_HOST'"
	    ;;
    esac
}

# ================================================================================
# Main

function pish_process_main_args()
{
    local OPTIND
    
    while getopts "vqVt:-:" c "$@"
    do
	case "$c" in
	    -)
		long_opt="${OPTARG%%=*}"
		long_arg="${OPTARG##*=}"
		OPTARG="$long_arg"
		pish_process_opt "$long_opt"
		;;
	    *)
		pish_process_opt "$c"
		;;
	esac
    done
    shift $((OPTIND - 1))
    if [[ $# -ne 0 ]]
    then
	pish_usage
    fi
}    

function pish_main()
{
    pish_init_script
    pish_process_main_args "$@"
    pish_detect_os
    pish_detect_box
    pish_configure

    verb "Running pish box '$PISH_BOX' for '$PISH_OS'..."
    verb ""    
    verb "    PISH=$PISH"
    verb "    PISH_ROOT=$PISH_ROOT"
    verb "    PISH_BIN=$PISH_BIN"
    verb "    PISH_LIB=$PISH_LIB"
    verb "    PISH_BOX_ROOT=$PISH_BOX_ROOT"
    verb "    PISH_BOX=$PISH_BOX"
    verb "    PISH_OS=$PISH_OS"
    verb ""
    
    verb "Loading libraries..."
    verb ""
    for lib in $PISH_LIB/*
    do
	if [[ $lib == *~ ]]; then
	    continue
	fi
	verb "    $lib"
	. $lib
    done
    verb ""
    verb "Running box..."
    verb ""

    # Ensure 1Password is present and logged in, everything depends on this.
    requirement 1pass_logged_in
    requirement box_load

    # Run all requirements (the box will typically add more than the above)
    requirement_run_all
}

# ================================================================================
# Top Level
#

pish_main "$@"
exit 0
