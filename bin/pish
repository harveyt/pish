#!/bin/bash
#
# Provision In SHell.
#

# ================================================================================
# Configuration
#

export PISH_BOX="$HOME/Projects"
export PISH_BOX_URL="git@github.com:harveyt"

# Determine script name
SCRIPT_NAME="$(basename "$0" .sh)"
SCRIPT_FILE="$(basename "$0")"
SCRIPT_DIR="$(cd "$(dirname "$0")"; pwd -P)"
SCRIPT_PATH="$SCRIPT_DIR/$SCRIPT_FILE"

# What to show as prefix in output.
if [[ "$SCRIPT_NAME" == "pish" ]]; then
    SCRIPT_TAG="pish"
else
    SCRIPT_TAG="pish $SCRIPT_NAME"
fi

# Verbose by default
VERBOSE=${VERBOSE:-true}

VERBOSE_PREFIX=${VERBOSE_PREFIX:-}

# ================================================================================
# Option processing
#
short_opts="vqVb:o:t:"

function usage()
{
    echo "usage: pish ...

Provision In SHell. Ensure a machine is provisioned according to some simple bash script requirements.

-v, --verbose	Verbose output to stderr (default).
-q, --quiet	No verbose output to stderr.
-V, --version	Show version to stderr.
-b, --box	Name of the box configuration.
-o, --os	Operating system type.

-t requirement	Run specified requirements (run defaults if none supplied).
" >&2
    exit 1
}

function process_opt()
{
    local opt="$1"

    case "$opt" in
	v|verbose)
	    VERBOSE=true
	    ;;
	q|quiet)
	    VERBOSE=false
	    ;;
	V|version)
	    show_version
	    ;;
	b|box)
	    BOX_CONFIG=$OPTARG
	    ;;
	o|os)
	    OS_CONFIG=$OPTARG
	    ;;
	t)
	    requirement $OPTARG
	    ;;
	*)
	    usage
	    ;;
    esac
}

function show_version()
{
    echo "pish %%VERSION%%" >&2
    exit 0
}

# ================================================================================
# Helpers

function error()
{
    verb_end ""
    echo "Error: $SCRIPT_TAG: $*" >&2
    exit 1
}

function verb()
{
    [[ "$VERBOSE" != "true" ]] && return
    echo "${VERBOSE_PREFIX}$*" >&2
}

function verb_begin()
{
    [[ "$VERBOSE" != "true" ]] && return
    echo -n "${VERBOSE_PREFIX}$*" >&2
}

function verb_cont()
{
    [[ "$VERBOSE" != "true" ]] && return
    echo -n "$*" >&2
}

function verb_end()
{
    [[ "$VERBOSE" != "true" ]] && return
    echo "$*" >&2
}

function is_function()
{
    local name="$1"
    local value="$(type -t $name)"
    [[ "$value" == "function" ]]
}

function quote_args()
{
    printf "\"%s\" " "$@"
}

# ================================================================================
# Converge functions

function converge_get_desc()
{
    local cmd="$1"
    shift
    if ! is_function ${cmd}_DESC
    then
	verb "[$cmd] FAILURE (${cmd}_DESC function is missing)"
	return 1
    fi

    eval ${cmd}_DESC $(quote_args "$@")
    return 0
}

function converge_prerequisites()
{
    local cmd
    local set_requirement=""
    eval $(converge_process_arguments "$@")

    if ! is_function ${cmd}_PREQ
    then
	return
    fi

    eval ${cmd}_PREQ $(quote_args "$@")
}

function converge_test()
{
    local cmd="$1"
    shift
    local desc="$(converge_get_desc $cmd "$@")"

    if [[ "$desc" == "" ]]
    then
	exit 1
    fi
    
    verb_begin "[$cmd] Test $desc ... "
    
    if ! is_function ${cmd}_TEST
    then
	verb_end "FAILURE (${cmd}_TEST function is missing)"
	exit 1
    fi

    if eval ${cmd}_TEST $(quote_args "$@")
    then
	verb_end "Ok"
	return 0
    fi

    verb_end "Needs Update"
    return 1
}

function converge_update()
{
    local cmd="$1"
    shift
    local desc="$(converge_get_desc $cmd "$@")"

    verb_begin "[$cmd] Resolve $desc ... "

    if is_function ${cmd}_SHELL
    then
	verb_end "Updating in sub-shell"
	converge_update_shell $cmd "$@"
    elif is_function ${cmd}_LOCAL
    then
	if converge_update_local $cmd "$@"
	then
	    verb_end "Updated"
	else
	    verb_end "FAILURE"
	fi
    else
	verb_end "FAILURE (${cmd}_SHELL and ${cmd}_LOCAL functions are missing)"
	exit 1
    fi
}

function converge_validate()
{
    local cmd="$1"
    shift
    local desc="$(converge_get_desc $cmd "$@")"

    verb_begin "[$cmd] Validate $desc ... "

    local func=_VALIDATE
    if ! is_function ${cmd}${func}
    then
	func=_TEST
	if ! is_function ${cmd}${func}
	then
	   verb_end "FAILURE (${cmd}_VALIDATE and ${cmd}_TEST functions are missing)"
	   exit 1	   
	fi
    fi

    if ! eval ${cmd}${func} $(quote_args "$@")
    then
	verb_end "FAILURE (${cmd}${func} returned non-zero)"
	exit 1
    fi

    verb_end "Ok"
}
    
function converge_update_shell()
{
    local cmd="$1"
    shift
    local args="$(quote_args "$@")"

    verb "[$cmd] --- Shell --- "

    local shell_prefix="${VERBOSE_PREFIX}[$cmd] "
    shift
    (
	eval ${cmd}_SHELL $args 2>&1 | sed -e "s/^/$shell_prefix/"
	exit ${PIPESTATUS[0]}
    )
    local status=$?

    if [[ $status -ne 0 ]]
    then
	verb "[$cmd] --- Shell - FAILURE (exit $status) ---"
	exit 1
    fi

    verb "[$cmd] --- Shell - Success ---"
}

function converge_update_local()
{
    local cmd="$1"
    shift
    eval ${cmd}_LOCAL $(quote_args "$@")
    local status=$?
    return $status
}

function converge_requirement()
{
    local cmd
    local set_requirement=""
    eval $(converge_process_arguments "$@")
    
    if ! converge_test $cmd "$@"
    then
	converge_update $cmd "$@"
	converge_validate $cmd "$@"

	if [[ "$set_requirement" != "" ]]
	then
	    verb "Adding \"$set_requirement\""
	    requirement "$set_requirement"
	fi
    fi
}

function converge_process_arguments()
{
    local c
    local OPTIND
    local set_requirement=""

    while getopts s: c "$@"
    do
	case $c in
	    s)
		set_requirement="$OPTARG"
		;;
	    *)
		error "Unknown option \"-$c\" for requirement"
		;;
	esac
    done
    shift $((OPTIND - 1))
    if [[ $# -eq 0 ]]
    then
	error "Missing command for requirement"
    fi

    local cmd="$1"
    shift
    
    echo "set_requirement=\"$set_requirement\"; cmd=\"$cmd\"; set -- $(quote_args "$@")"
}

# ================================================================================
# Requirement handling
#
declare -a REQUIREMENTS

function requirement()
{
    if requirement_exists "$@"
    then
	return
    fi

    converge_prerequisites "$@"
    
    local args="$(quote_args "$@")"
    REQUIREMENTS+=("$args")
}

function requirement_exists()
{
    local args="$(quote_args "$@")"
    for requirement in "${REQUIREMENTS[@]}"
    do
	if [[ "$requirement" == "$args" ]]; then
	    return 0
	fi
    done
    return 1
}
    
function requirement_run_all()
{
    while true
    do
	if [[ "${#REQUIREMENTS[@]}" -eq 0 ]]
	then
	    break
	fi

	# Pop one
	local requirement="${REQUIREMENTS[0]}"
	REQUIREMENTS=("${REQUIREMENTS[@]:1}")

	# Run it
	eval converge_requirement $requirement
    done
}

# ================================================================================
# Main

function process_main_args()
{
    local OPTIND
    
    while getopts "${short_opts}-:" c "$@"
    do
	case "$c" in
	    -)
		long_opt="${OPTARG%%=*}"
		long_arg="${OPTARG##*=}"
		OPTARG="$long_arg"
		process_opt "$long_opt"
		;;
	    *)
		process_opt "$c"
		;;
	esac
    done
    shift $((OPTIND - 1))
    if [[ $# -ne 0 ]]
    then
	usage
    fi
}    

function main()
{
    if [[ $BOX_CONFIG == "" ]]; then
	error "Must provide --box=name argument for box configuration"
    fi
    if [[ $OS_CONFIG == "" ]]; then
	error "Must provide --os=name argument for os configuration"
    fi

    export PISH="$SCRIPT_PATH"
    root="${SCRIPT_DIR%%/bin}"
    export PISH_BIN="${root}/bin"
    export PISH_LIB="${root}/lib/pish"
    export CURL="curl -fsSL"
    
    verb "Running pish box '$BOX_CONFIG' for '$OS_CONFIG'..."
    verb ""    
    verb "    PISH=$PISH"
    verb "    PISH_BIN=$PISH_BIN"
    verb "    PISH_LIB=$PISH_LIB"
    verb "    PISH_BOX=$PISH_BOX"
    verb ""
    
    verb "Loading libraries..."
    for lib in $PISH_LIB/*
    do
	if [[ $lib == *~ ]]; then
	    continue
	fi
	verb "    $lib"
	. $lib
    done
    verb ""
    verb "Running box..."
    verb ""

    # Ensure 1Password is present and logged in, everything depends on this.
    requirement 1pass_logged_in
    requirement box_load

    # Run all requirements (the box will typically add more than the above)
    requirement_run_all
}

# ================================================================================
# Top Level
#

process_main_args "$@"
main "$@"
exit 0

