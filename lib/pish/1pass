#!/bin/bash
#
# 1Password and op command line.
#

# ================================================================================
# Add 1Password repository

function 1pass_add_repository_DESC()
{
    echo "add 1Password to apt repository"
}
    
function 1pass_add_repository_TEST()
{
    test -f $OP_APT_SOURCE
}

function 1pass_add_repository_SHELL()
{
    echo "deb [arch=$(dpkg --print-architecture) signed-by=$OP_KEYRING] $OP_APT_SOURCE_URL stable main" | sudo tee $OP_APT_SOURCE
}

# ================================================================================
# Add 1Password debsig policy and keyrings

function 1pass_add_debsig_policy_DESC()
{
    echo "add 1Password debsig policy"
}
    
function 1pass_add_debsig_policy_TEST()
{
    test -f $OP_DEBSIG_POLICY
}

function 1pass_add_debsig_policy_SHELL()
{
    sudo mkdir -p $(dirname "$OP_DEBSIG_POLICY")
    $CURL $OP_DEBSIG_POLICY_URL | sudo tee $OP_DEBSIG_POLICY
}

# ================================================================================
# Add 1Password debsig keyring

function 1pass_add_debsig_keyring_DESC()
{
    echo "add 1Password debsig keyring"
}
    
function 1pass_add_debsig_keyring_TEST()
{
    test -f $OP_DEBSIG_KEYRING
}

function 1pass_add_debsig_keyring_SHELL()
{
    sudo mkdir -p $(dirname "$OP_DEBSIG_KEYRING")    
    $CURL $OP_DEBSIG_KEYRING_URL | sudo gpg --dearmor --output $OP_DEBSIG_KEYRING
}

# ================================================================================
# Install op command line

function 1pass_op_install_PREQ()
{
    requirement apt_add_keyring "$OP_KEYRING_URL" "$OP_KEYRING"
    
    requirement 1pass_add_repository
    requirement 1pass_add_debsig_policy
    requirement 1pass_add_debsig_keyring
}

function 1pass_op_install_DESC()
{
    echo "install 1Password op command line"
}
    
function 1pass_op_install_TEST()
{
    type -p $OP >/dev/null
}

function 1pass_op_install_SHELL()
{
    # Adding a new source needs to force an apt update.
    sudo apt update
    sudo apt install -y 1password-cli
}

# ================================================================================
# Ensure logged into 1Password
#

function 1pass_logged_in_PREQ()
{
    if ! type -p $OP >/dev/null; then
	requirement 1pass_op_install
    fi
}

function 1pass_logged_in_DESC()
{
    echo "check logged into 1Password"
}

function 1pass_logged_in_TEST()
{
    # TODO: If there is no account, then ask up front for all the info?
    # TODO: - sign-in url: "my"
    # TODO: - email: "...@..."
    # TODO: - secret key: xy-123456-123456-12345-12345-12345-12345
    # TODO: Hard to validate though.
    
    local uuid=$(op whoami 2>/dev/null | awk '$1 == "User" { print $3 }')
    local session=""
    if [[ "$uuid" != "" ]]; then
	eval session=\$OP_SESSION_$uuid
    fi
    if [[ "$session" != "" ]]; then
	true
	return
    fi

    verb_end ""
    eval $(op signin)
    verb_begin "[1pass_logged_in] Test has logged into 1Password ... "
}

# ================================================================================
# Helper Functions

function 1pass_get_master_password()
{
    $OP item get $OP_ACCOUNT_ID --fields label=master-password
}

# # --------------------------------------------------------------------------------
# # This will login user if required
# #
# 
# function 1pass_login_PREQ()
# {
#     requirement can_execute "$_1PASS"
#     requirement can_execute "$_1PASS_OP"
#     requirement can_execute "$_1PASS_JQ"
# }
# 
# function 1pass_login_DESC()
# {
#     echo "login into 1Password"
# }
# 
# function 1pass_login_TEST()
# {
#     "$_1PASS" --login-valid
# }
# 
# function 1pass_login_LOCAL()
# {
#     export _1PASS_INPUT=terminal
#     $(eval "$_1PASS" --login)
# }
# 
# # --------------------------------------------------------------------------------
# 
# function 1pass_get_user_PREQ()
# {
#     requirement 1pass_logged_in
# }
# 
# function 1pass_get_user_DESC()
# {
#     local user="$1"
#     local id="$2"
#     echo "has user for \"$user\" in $id"
# }
# 
# function 1pass_get_user_TEST()
# {
#     local user="$1"
#     local id="$2"
#     local USER="$(eval echo \$$id)"
#     
#     [[ "$USER" != "" ]]
# }
# 
# function 1pass_get_user_LOCAL()
# {
#     local user="$1"
#     local id="$2"
# 
#     eval $id=\""$("$_1PASS" -u "$user")"\"
# }
# 
# # --------------------------------------------------------------------------------
# 
# function 1pass_get_password_PREQ()
# {
#     requirement 1pass_logged_in
# }
# 
# function 1pass_get_password_DESC()
# {
#     local user="$1"
#     local id="$2"
#     echo "has password for \"$user\" in $id"
# }
# 
# function 1pass_get_password_TEST()
# {
#     local user="$1"
#     local id="$2"
#     local PASSWORD="$(eval echo \$$id)"
#     
#     [[ "$PASSWORD" != "" ]]
# }
# 
# function 1pass_get_password_LOCAL()
# {
#     local user="$1"
#     local id="$2"
# 
#     eval $id=\""$("$_1PASS" -p "$user")"\"
# }
# 
# # --------------------------------------------------------------------------------
# 
# function 1pass_get_master_password_PREQ()
# {
#     requirement 1pass_logged_in
# }
# 
# function 1pass_get_master_password_DESC()
# {
#     echo "has master password in _1PASS_MASTER_PASSWORD"
# }
# 
# function 1pass_get_master_password_TEST()
# {
#     [[ "$_1PASS_MASTER_PASSWORD" != "" ]]
# }
# 
# function 1pass_get_master_password_LOCAL()
# {
#     _1PASS_MASTER_PASSWORD="$("$_1PASS" --master-password)"
# }
