#!/bin/bash
#
# GPG / PGP
#

GPG_INSTALLED=false
GPG_TRUSTDB_VALIDATED=false

# ================================================================================
# Ensure GPG home has right perms

function gpg_home_perms_DESC()
{
    echo "ensure gpg home has good permissions"
}

function gpg_home_perms_TEST()
{
    local perms=$(stat --printf="%a" $GPG_HOME)
    [[ "$perms" == "$GPG_HOME_PERMS" ]]
}

function gpg_home_perms_SHELL()
{
    chmod $GPG_HOME_PERMS $GPG_HOME
}

# ================================================================================
# Ensure GPG Home configuration up-to-date

function gpg_home_conf_DESC()
{
    echo "ensure gpg home configuration is good"
}

function gpg_home_conf_TEST()
{
    cmp -s $GPG_HOME/gpg.conf $GPG_CONF
}

function gpg_home_conf_SHELL()
{
    cp $GPG_CONF $GPG_HOME/gpg.conf
}

# ================================================================================
# Install a public key from encrypted file

function gpg_op_install_DESC()
{
    local suffix="$1"
    echo "ensure gpg key '$suffix' is installed"
}

function gpg_op_install_TEST()
{
    local suffix="$1"
    local hexkey="0x$GPG_OP_KEYID"
    local arg="--list-public-keys"    
    local line="pub.*rsa4096/$hexkey"

    if [[ "$suffix" == "secret-subkeys.txt" ]]; then
	arg="--list-secret-keys"
	line="sec#.*rsa4096/$hexkey"
    fi
    
    local output=$(gpg $arg 0x$GPG_OP_KEYID 2>/dev/null | grep "$line")
    [[ "$output" != "" ]]
}

function gpg_op_install_LOCAL()
{
    local suffix="$1"
    local file="gpg-${GPG_OP_DATE}-${GPG_OP_KEYID}-$suffix"
    local doc="${GPG_OP_PREFIX}${file}"

    op document get "$doc" --output "$GPG_HOME/$file"
    1pass_get_master_password | gpg --batch --pinentry-mode loopback --passphrase-fd 0 \
				    --import "$GPG_HOME/$file"
    rm -f "$GPG_HOME/$file"
}

# ================================================================================
# Trust key

function gpg_trust_key_DESC()
{
    local keyid="$1"
    echo "trust in keyid '$keyid'"
}

function gpg_trust_key_TEST()
{
    local keyid="$1"
    local output=$(gpg --list-keys $keyid | sed -n -e 's/^uid.*\[\([^]]*\)\].*$/\1/p' | egrep -v ultimate)
    [[ "$output" == "" ]]
}

function gpg_trust_key_SHELL()
{
    local keyid="$1"
    local fpr=$(gpg --list-keys --with-colons $keyid | awk -F: 'BEGIN { show=1 } /^fpr:/ { if (show) print $10; } /^sub:/ { show = 0; }')
    echo -e "5\ny\n" | gpg --no-tty --command-fd 0 --expert --edit-key $fpr trust
}

# ================================================================================
# Validate TrustDB

function gpg_trustdb_validated_DESC()
{
    echo "trustdb is valid"
}

function gpg_trustdb_validated_TEST()
{
    local orig=$GPG_TRUSTDB_VALIDATED
    GPG_TRUSTDB_VALIDATED=true
    $orig
}

function gpg_trustdb_validated_SHELL()
{
    gpg --check-trustdb
}


# ================================================================================
# Main install target
function gpg_install_PREQ()
{
    requirement 1pass_logged_in
    requirement gpg_home_perms
    requirement gpg_home_conf
    requirement apt_install gpg
    requirement apt_install pinentry-gtk2
    requirement gpg_op_install public-keys.txt
    requirement gpg_op_install secret-subkeys.txt
    requirement gpg_trust_key $GPG_OP_KEYID
    requirement gpg_trustdb_validated
}

function gpg_install_DESC()
{
    echo "ensure gpg is installed"
}

function gpg_install_TEST()
{
    $GPG_INSTALLED
}

function gpg_install_LOCAL()
{
    local major minor
    eval $(gpg --version | sed -n -e 's/^gpg (GnuPG) \([0-9][0-9]*\)\.\([0-9][0-9]*\).*$/major=\1 minor=\2/p')
    if [[ "$major" < $GPG_MAJOR ]]; then
	error "gpg is $major.$minor, need at least $GPG_MAJOR.$GPG_MINOR"
    fi
    if [[ "$major" == $GPG_MAJOR && "$minor" < $GPG_MINOR ]]; then
	error "gpg is $major.$minor, need at least $GPG_MAJOR.$GPG_MINOR"
    fi

    GPG_INSTALLED=true
}
