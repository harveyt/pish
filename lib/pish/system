#!/bin/bash
#
# Provision In SHell.
#
# Version: %%VERSION%%
#
# %%LICENSE%%
#

# ================================================================================
# Requirements for scutil
#
function system_scutil_PREQ()
{
    requirement sudo_cache_root_password
}

function system_scutil_DESC()
{
    local pref="$1"
    local value="$2"
    echo "scutil preference \"$pref\" has value \"$value\""
}

function system_scutil_TEST()
{
    local pref="$1"
    local value="$2"
    local current="$(sudo scutil --get "$pref" 2>/dev/null)"

    [[ "$current" == "$value" ]]
}

function system_scutil_SHELL()
{
    local pref="$1"
    local value="$2"

    sudo scutil --set "$pref" "$value"
}

# ================================================================================
# Requirements for defaults
#
function system_sudo_defaults_PREQ()
{
    requirement sudo_cache_root_password
}

function system_sudo_defaults_DESC()
{
    local domain="$1"
    local key="$2"
    local type="$3"
    local value="$4"
    echo "sudo defaults domain \"$domain\" with \"$key\" is \"$value\""
}

function system_sudo_defaults_TEST()
{
    local domain="$1"
    local key="$2"
    local type="$3"
    local value="$4"
    local current="$(sudo defaults read "$domain" "$key" 2>/dev/null)"

    [[ "$current" == "$value" ]]
}

function system_sudo_defaults_SHELL()
{
    local domain="$1"
    local key="$2"
    local type="$3"
    local value="$4"

    sudo defaults write "$domain" "$key" "$type" "$value"
}

# --------------------------------------------------------------------------------
function system_defaults_DESC()
{
    local domain="$1"
    local key="$2"
    local type="$3"
    local value="$4"
    echo "defaults domain \"$domain\" with \"$key\" is \"$value\""
}

function system_defaults_TEST()
{
    local domain="$1"
    local key="$2"
    local type="$3"
    local value="$4"
    local current="$(defaults read "$domain" "$key" 2>/dev/null)"

    [[ "$current" == "$value" ]]
}

function system_defaults_SHELL()
{
    local domain="$1"
    local key="$2"
    local type="$3"
    local value="$4"

    defaults write "$domain" "$key" "$type" "$value"
}

# ================================================================================
# Requirements for systemsetup
#

function system_setup_PREQ()
{
    requirement sudo_cache_root_password
}

function system_setup_DESC()
{
    local key="$1"
    local value="$2"
    echo "system setup with \"$key\" has \"$value\""
}

function system_setup_TEST()
{
    local key="$1"
    local value="$2"
    local current="$(sudo systemsetup -get$key 2>/dev/null)"
    local prefix=""

    case $key in
	timezone)
	    prefix="Time Zone: "
	    ;;
	usingnetworktime)
	    prefix="Network Time: "
	    ;;
	networktimeserver)
	    prefix="Network Time Server: "
	    ;;
	*)
	    prefix=""
	    ;;
    esac
    
    [[ "$current" == "$prefix$value" ]]
}

function system_setup_SHELL()
{
    local key="$1"
    local value="$2"

    sudo systemsetup -set$key "$value"
}

# ================================================================================
# Requirements for Dock
#

function restart_dock_DESC()
{
    echo "dock process is restarted"
}

function restart_dock_TEST()
{
    false
}

function restart_dock_LOCAL()
{
    killall Dock
}

function restart_dock_VALIDATE()
{
    true
}

# ================================================================================
# Helpers for Keyboard
#

function get_keyboard_vendor_product()
{
    eval $(ioreg -n "$1" -r | sed -E -n \
				  -e 's/^.*"(idVendor|VendorID)" = /vendor_id=/p' \
				  -e 's/^.*"(idProduct|ProductID)" = /product_id=/p')
}

function get_keyboard_defaults_key()
{
    local vendor_id
    local product_id
    get_keyboard_vendor_product IOHIDKeyboard
    if [[ "$vendor_id" == "" || "$product_id" == "" ]]
    then
	vm_kb="$(ioreg | sed -n -e 's/^.*\(VMware Virtual USB Keyboard@[^ ]*\).*$/\1/p' | head -1)"
	if [[ "$vm_kb" == "" ]]
	then
	    error "Cannot find keyboard"
	fi
	get_keyboard_vendor_product "$vm_kb"

	if [[ "$vendor_id" == "" || "$product_id" == "" ]]
	then
	    error "Cannot find vendor and product for VM keyboard"
	fi
    fi
    echo "com.apple.keyboard.modifiermapping.$vendor_id-$product_id-0"
}

function get_keyboard_modifier_value()
{
    local key=$(get_keyboard_defaults_key)
    if [[ "$key" == "" ]]; then
     	exit 1
    fi
    defaults -currentHost read -g $key 2>/dev/null
}

function get_shortcut_id_by_name()
{
    # https://web.archive.org/web/20141112224103/http://hintsforums.macworld.com/showthread.php?t=114785
    local name="$1"
    case $name in
	"Mission Control")
	    echo 32
	    ;;
	"Application windows")
	    echo 33
	    ;;
	"Move left a space")
	    echo 79
	    ;;
	"Move right a space")
	    echo 81
	    ;;
	*)
	    error "Unknown shortcut name"
    esac
}	

PLIST_BUDDY=/usr/libexec/plistbuddy
HOT_KEYS=$HOME/Library/Preferences/com.apple.symbolichotkeys.plist

# ================================================================================
# Requirements for Keyboard
#

function system_keyboard_modifiers_DESC()
{
    echo "keyboard modifiers are correct"
}

function system_keyboard_modifiers_TEST()
{
    local value="$(get_keyboard_modifier_value)"

    # TODO: Hard coded to change Caps Lock to Control
    local expected="(
        {
        HIDKeyboardModifierMappingDst = 30064771300;
        HIDKeyboardModifierMappingSrc = 30064771129;
    }
)"
    [[ "$value" == "$expected" ]]
}

function system_keyboard_modifiers_SHELL()
{
    local key=$(get_keyboard_defaults_key)
    if [[ "$key" == "" ]]; then
     	error "Cannot get keyboard modifier information"
    fi
    # TODO: Hard coded to change Caps Lock to Control    
    defaults -currentHost write -g $key -array '<dict>
     <key>HIDKeyboardModifierMappingDst</key>
     <integer>30064771300</integer>
     <key>HIDKeyboardModifierMappingSrc</key>
     <integer>30064771129</integer>
</dict>'
}

# --------------------------------------------------------------------------------

function system_keyboard_shortcut_disabled_DESC()
{
    local name="$1"
    echo "keyboard shortcut \"$name\" is disabled"
}

function system_keyboard_shortcut_disabled_TEST()
{
    local name="$1"
    local id=$(get_shortcut_id_by_name "$name")

    if [[ "$id" == "" ]]
    then
	error "Cannot find shortcut id for \"$name\""
    fi

    local value="$($PLIST_BUDDY -c "print :AppleSymbolicHotKeys:$id:enabled" $HOT_KEYS 2>/dev/null)"
    [[ "$value" == "false" ]]
}

function system_keyboard_shortcut_disabled_SHELL()
{
    local name="$1"
    local id=$(get_shortcut_id_by_name "$name")

    $PLIST_BUDDY -c "set :AppleSymbolicHotKeys:$id:enabled false" $HOT_KEYS
}

# --------------------------------------------------------------------------------

function system_keyboard_shortcut_enabled_DESC()
{
    local name="$1"
    echo "keyboard shortcut \"$name\" is enabled"
}

function system_keyboard_shortcut_enabled_TEST()
{
    local name="$1"
    local param1="$2"
    local param2="$3"
    local param3="$4"    
    local id=$(get_shortcut_id_by_name "$name")

    if [[ "$id" == "" ]]
    then
	error "Cannot find shortcut id for \"$name\""
    fi

    local value="$($PLIST_BUDDY -c "print :AppleSymbolicHotKeys:$id" $HOT_KEYS 2>/dev/null)"
    local expected="Dict {
    enabled = true
    value = Dict {
        type = standard
        parameters = Array {
            $param1
            $param2
            $param3
        }
    }
}"
    [[ "$value" == "$expected" ]]
}

function system_keyboard_shortcut_enabled_SHELL()
{
    local name="$1"
    local param1="$2"
    local param2="$3"
    local param3="$4"    
    local id=$(get_shortcut_id_by_name "$name")

    $PLIST_BUDDY -c "delete :AppleSymbolicHotKeys:$id" $HOT_KEYS
    $PLIST_BUDDY -c "add :AppleSymbolicHotKeys:$id dict" $HOT_KEYS
    $PLIST_BUDDY -c "add :AppleSymbolicHotKeys:$id:enabled bool YES" $HOT_KEYS
    $PLIST_BUDDY -c "add :AppleSymbolicHotKeys:$id:value dict" $HOT_KEYS
    $PLIST_BUDDY -c "add :AppleSymbolicHotKeys:$id:value:type string standard" $HOT_KEYS
    $PLIST_BUDDY -c "add :AppleSymbolicHotKeys:$id:value:parameters array" $HOT_KEYS
    $PLIST_BUDDY -c "add :AppleSymbolicHotKeys:$id:value:parameters:0 integer $param1" $HOT_KEYS
    $PLIST_BUDDY -c "add :AppleSymbolicHotKeys:$id:value:parameters:1 integer $param2" $HOT_KEYS
    $PLIST_BUDDY -c "add :AppleSymbolicHotKeys:$id:value:parameters:2 integer $param3" $HOT_KEYS
}
