#!/bin/bash
#
# Apt utilities
#

APT_UPDATED=false

# ================================================================================
# Ensure Apt is up-to-date

function apt_updated_DESC()
{
    echo "apt is updated"
}
    
function apt_updated_TEST()
{
    $APT_UPDATED
}

function apt_updated_SHELL()
{
    sudo apt update
    APT_UPDATED=true
}

# ================================================================================
# Install via apt

function apt_install_DESC()
{
    echo "apt install $1"
}
    
function apt_install_TEST()
{
    dpkg-query --status $1 2>/dev/null
}

function apt_install_SHELL()
{
    sudo apt install -y $1
}

# ================================================================================
# Add keyring

function apt_add_keyring_DESC()
{
    local url="$1"
    local key="$2"
    echo "apt add key from '$url' to '$key'"
}
    
function apt_add_keyring_TEST()
{
    local url="$1"
    local key="$2"
    test -f "$key"
}

function apt_add_keyring_SHELL()
{
    local url="$1"
    local key="$2"
    $CURL $url | sudo gpg --dearmor --output "$key"
}

# ================================================================================
# Add repository

function apt_add_repository_DESC()
{
    echo "apt add repository $1"
}
    
function apt_add_repository_TEST()
{
    local id="$1"
    local part="${id##ppa:}"
    local existing=""
    
    if [[ "$part" != "$id" ]]; then
	# ID must be ppa:user/name
	local user="${part%%/*}"
	local name="${part##*/}"
	existing=$(sed -n -e "\%deb http.*/ppa\..*/$user/$name/.*%p" /etc/apt/sources.list /etc/apt/sources.list.d/*)
    else
	# ID must be a literal string
	existing=$(sed -n -e "\%$id%p" /etc/apt/sources.list /etc/apt/sources.list.d/*)	
    fi
    [[ "$existing" != "" ]]
}

function apt_add_repository_SHELL()
{
    local id="$1"
    sudo add-apt-repository -y "$id"
    sudo apt update
}
